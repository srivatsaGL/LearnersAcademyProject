package com.academy.DAO.impl;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;

import com.academy.DAO.ClassDAO;
import com.academy.DAO.SubjectDAO;
import com.model.pojo.Classes;
import com.model.pojo.Student;
import com.model.pojo.Subject;

public class ClassDAOImpl implements ClassDAO{
	Configuration configuration=new Configuration().configure();
	StandardServiceRegistryBuilder builder=new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
	SessionFactory factory=configuration.buildSessionFactory(builder.build());
	SubjectDAO dao = new SubjectDAOImpl();
	@Override
	public Classes createClasses(Classes classes) {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		session.persist(classes);
		transaction.commit();
		session.close();
		return classes;
	}
	@Override
	public Classes getClassById(int id) {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		Classes c = (Classes) session.get(Classes.class, id);
		session.save(c);
		transaction.commit();
		session.close();
		return c;
	}
	@Override
	public List<Classes> getAllClasses() {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		List<Classes> classList = session.createQuery("from com.model.pojo.Classes").list();
		transaction.commit();
		session.close();
		return classList;
	}
	@Override
	public void removeClass(int id) {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		Classes c = new Classes();
		c.setClassId(id);
		session.delete(c);
		transaction.commit();
		session.close();
	}
	@Override
	public Classes updateClass(Classes classes) {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		session.update(classes);
		transaction.commit();
		session.close();
		return classes;
	}
	@Override
	public List<Subject> updateSubject(Classes classes) {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		List<Subject> subjects = classes.getSubjectList();
		for (Subject subject : subjects) {
			Subject s1 = (Subject) session.get(Subject.class, subject.getSubjectId());
			s1.setClasses(classes);
			session.update(s1);
		}
		transaction.commit();
		session.close();
		return subjects;
	}
	@Override
	public List<Student> getAllStudents(int id) {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		List<Student> students = getClassById(id).getStudents();
		transaction.commit();
		session.close();
		return students;
	}
	@Override
	public List<Student> updateStudent(Classes classes) {
		Session session = factory.openSession();
		Transaction transaction = session.beginTransaction();
		List<Student> students = classes.getStudents();
		for (Student student : students) {
			Student s1 = (Student) session.get(Student.class, student.getStudentId());
			s1.setClasses(classes);
			session.update(s1);
		}
		transaction.commit();
		session.close();
		return students;
	}
}
